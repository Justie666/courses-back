generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String @unique
  name     String
  password String
  role     Role   @default(USER)

  ratingCourse        RatingCourse[]
  userFavoriteCourse  UserFavoriteCourse[]
  userPurchasedCourse UserPurchasedCourse[]
  requestBackCall     RequestBackCall[]

  @@map("user")
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title String @unique

  courseCategory CourseCategory[]

  @@map("category")
}

model Course {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title String @unique
  price Int    @default(0)
  // TODO убрать @default("")
  slug  String @default("")
  image String @default("")

  ratingCourse        RatingCourse[]
  courseCategory      CourseCategory[]
  userFavoriteCourse  UserFavoriteCourse[]
  userPurchasedCourse UserPurchasedCourse[]

  @@map("course")
}

model CourseCategory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Category   Category @relation(onDelete: Cascade, onUpdate: Cascade, fields: [categoryId], references: [id])
  categoryId String   @map("category_id")

  Course   Course @relation(onDelete: Cascade, onUpdate: Cascade, fields: [courseId], references: [id])
  courseId String @map("course_id")

  @@map("course_category")
}

model RatingCourse {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  Course   Course? @relation(fields: [courseId], references: [id])
  courseId String? @map("course_id")

  @@map("rating_course")
}

model UserFavoriteCourse {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  User     User?   @relation(fields: [userId], references: [id])
  userId   String? @map("user_id")
  Course   Course? @relation(fields: [courseId], references: [id])
  courseId String? @map("course_id")

  @@map("user_favorite_course")
}

model UserPurchasedCourse {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  User     User?   @relation(fields: [userId], references: [id])
  userId   String? @map("user_id")
  Course   Course? @relation(fields: [courseId], references: [id])
  courseId String? @map("course_id")

  @@map("user_purchased_course")
}

enum StatusRequestBackCall {
  PENDING
  ACCEPT
  REJECT
}

model RequestBackCall {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status  StatusRequestBackCall @default(PENDING)
  comment String                @default("")
  phone   String

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  @@map("request_back_call")
}
