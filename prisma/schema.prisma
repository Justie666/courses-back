generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String @unique
  name     String
  password String
  role     Role   @default(USER)

  ratingCourse        RatingCourse[]
  userFavoriteCourse  UserFavoriteCourse[]
  userWatchedLesson   UserWatchedLesson[]
  userPurchasedCourse UserPurchasedCourse[]
  requestInternship   RequestInternship[]
  userProject         UserProject[]
  task                Task[]

  @@map("user")
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title          String           @unique
  courseCategory CourseCategory[]

  @@map("category")
}

model Course {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title String @unique
  price Int    @default(0)
  image String @default("")
  slug  String @unique

  courseCategory      CourseCategory[]
  lessons             Lesson[]
  ratingCourse        RatingCourse[]
  userFavoriteCourse  UserFavoriteCourse[]
  userPurchasedCourse UserPurchasedCourse[]

  @@map("course")
}

model CourseCategory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  categoryId String   @map("category_id")
  courseId   String   @map("course_id")
  Category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("course_category")
}

model RatingCourse {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId   String? @map("user_id")
  courseId String? @map("course_id")
  Course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User     User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("rating_course")
}

model UserFavoriteCourse {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId   String? @map("user_id")
  courseId String? @map("course_id")
  Course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User     User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("user_favorite_course")
}

model UserPurchasedCourse {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId   String? @map("user_id")
  courseId String? @map("course_id")
  Course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User     User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("user_purchased_course")
}

model UserWatchedLesson {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  User     User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String? @map("user_id")
  Lesson   Lesson? @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lessonId String? @map("lesson_id")

  @@map("user_watched_lesson")
}

model RequestBackCall {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status  StatusRequest @default(PENDING)
  problem String
  name    String
  comment String        @default("")
  phone   String

  @@map("request_back_call")
}

model Lesson {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title String
  video String @default("")
  slug  String

  userWatchedLesson UserWatchedLesson[]

  courseId String? @map("course_id")
  Course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("lesson")
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title  String        @unique
  status StatusProject @default(IN_PROGRESS)

  userProject UserProject[]
  Task        Task[]

  @@map("project")
}

model Direction {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title String @unique

  requestInternship RequestInternship[]
  userProject       UserProject[]
  task              Task[]

  @@map("direction")
}

enum StatusProject {
  IN_PROGRESS
  CANCELLED
  READY
}

enum Role {
  USER
  ADMIN
}

enum StatusRequest {
  PENDING
  ACCEPT
  REJECT
}

model RequestInternship {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status StatusRequest @default(PENDING)

  phone    String
  skills   String
  aboutMe  String
  projects String

  userProject UserProject[]

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @map("user_id")

  Direction   Direction @relation(fields: [directionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  directionId String    @map("direction_id")

  @@map("request_internship")
}

model UserProject {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  User                User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId              String             @map("user_id")
  Project             Project            @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId           String             @map("project_id")
  Direction           Direction          @relation(fields: [directionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  directionId         String             @map("direction_id")
  RequestInternship   RequestInternship? @relation(fields: [requestInternshipId], references: [id])
  requestInternshipId String?            @map("request_internship_id")

  @@map("user_project")
}

enum StatusTask {
  NO_STATUS
  IN_PROGRESS
  TESTING
  DONE
  ARCHIVE
}

enum Priority {
  NO
  LOW
  MEDIUM
  HIGH
}

model Task {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title    String
  status   StatusTask
  content  String     @default("")
  deadline DateTime?
  priority Priority   @default(NO)

  Project     Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId   String?    @map("project_id")
  directionId String?    @map("direction_id")
  Direction   Direction? @relation(fields: [directionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User        User?      @relation(fields: [userId], references: [id])
  userId      String?    @map("user_id")

  @@map("task")
}
